try{ window.searchData = {"info":[["Leap.Controller#frame","Leap.Controller","Leap.Controller.html#frame","(Number history)","<p>Returns a frame of tracking data from the Leap.</p> <p>Use the optional history parameter to specify which frame to retrieve.  Call frame() or frame(0) to access the most recent frame; call frame(1) to  access the previous frame, and so on. If you use a history value greater  than the number of stored frames, then the controller returns an invalid frame.</p>",0],["Leap.Frame#dump","Leap.Frame","Leap.Frame.html#dump","function","<p>Returns a JSON-formatted string containing the hands, pointables and gestures in this frame.</p>",1],["Leap.Frame#finger","Leap.Frame","Leap.Frame.html#finger","(String id)","<p>The finger with the specified ID in this frame.</p> <p>Use the Frame finger() function to retrieve the finger from this frame using an ID value obtained from a previous frame. This function always returns a Finger object, but if no finger with the specified ID is present, an invalid Pointable object is returned.</p> <p>Note that ID values persist across frames, but only until tracking of a particular object is lost. If tracking of a finger is lost and subsequently regained, the new Pointable object representing that physical finger may have a different ID than that representing the finger in an earlier frame.</p>",2],["Leap.Frame#hand","Leap.Frame","Leap.Frame.html#hand","(String id)","<p>The Hand object with the specified ID in this frame.</p> <p>Use the Frame hand() function to retrieve the Hand object from this frame using an ID value obtained from a previous frame. This function always returns a Hand object, but if no hand with the specified ID is present, an invalid Hand object is returned.</p> <p>Note that ID values persist across frames, but only until tracking of a particular object is lost. If tracking of a hand is lost and subsequently regained, the new Hand object representing that physical hand may have a different ID than that representing the physical hand in an earlier frame.</p>",3],["Leap.Frame#pointable","Leap.Frame","Leap.Frame.html#pointable","(String id)","<p>The Pointable object with the specified ID in this frame.</p> <p>Use the Frame pointable() function to retrieve the Pointable object from this frame using an ID value obtained from a previous frame. This function always returns a Pointable object, but if no finger or tool with the specified ID is present, an invalid Pointable object is returned.</p> <p>Note that ID values persist across frames, but only until tracking of a particular object is lost. If tracking of a finger or tool is lost and subsequently regained, the new Pointable object representing that finger or tool may have a different ID than that representing the finger or tool in an earlier frame.</p>",4],["Leap.Frame#rotationAngle","Leap.Frame","Leap.Frame.html#rotationAngle","(Leap.Frame sinceFrame)","<p>The angle of rotation around the rotation axis derived from the overall  rotational motion between the current frame and the specified frame.</p> <p>The returned angle is expressed in radians measured clockwise around  the rotation axis (using the right-hand rule) between the start and end frames.  The value is always between 0 and pi radians (0 and 180 degrees).</p> <p>The Leap derives frame rotation from the relative change in position and  orientation of all objects detected in the field of view.</p> <p>If either this frame or sinceFrame is an invalid Frame object, then the  angle of rotation is zero.</p>",5],["Leap.Frame#rotationAxis","Leap.Frame","Leap.Frame.html#rotationAxis","(Leap.Frame sinceFrame)","<p>The axis of rotation derived from the overall rotational motion between  the current frame and the specified frame.</p> <p>The returned direction vector is normalized.</p> <p>The Leap derives frame rotation from the relative change in position and  orientation of all objects detected in the field of view.</p> <p>If either this frame or sinceFrame is an invalid Frame object, or if no  rotation is detected between the two frames, a zero vector is returned.</p>",6],["Leap.Frame#rotationMatrix","Leap.Frame","Leap.Frame.html#rotationMatrix","(Leap.Frame sinceFrame)","<p>The transform matrix expressing the rotation derived from the overall  rotational motion between the current frame and the specified frame.</p> <p>The Leap derives frame rotation from the relative change in position and  orientation of all objects detected in the field of view.</p> <p>If either this frame or sinceFrame is an invalid Frame object, then  this method returns an identity matrix.</p>",7],["Leap.Frame#scaleFactor","Leap.Frame","Leap.Frame.html#scaleFactor","(Leap.Frame sinceFrame)","<p>The scale factor derived from the overall motion between the current frame and the specified frame.</p> <p>The scale factor is always positive. A value of 1.0 indicates no scaling took place.  Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.</p> <p>The Leap derives scaling from the relative inward or outward motion of all  objects detected in the field of view (independent of translation and rotation).</p> <p>If either this frame or sinceFrame is an invalid Frame object, then this method returns 1.0.</p>",8],["Leap.Frame#tool","Leap.Frame","Leap.Frame.html#tool","(String id)","<p>The tool with the specified ID in this frame.</p> <p>Use the Frame tool() function to retrieve a tool from this frame using an ID value obtained from a previous frame. This function always returns a Pointable object, but if no tool with the specified ID is present, an invalid Pointable object is returned.</p> <p>Note that ID values persist across frames, but only until tracking of a particular object is lost. If tracking of a tool is lost and subsequently regained, the new Pointable object representing that tool may have a different ID than that representing the tool in an earlier frame.</p>",9],["Leap.Frame#toString","Leap.Frame","Leap.Frame.html#toString","function","<p>A string containing a brief, human readable description of the Frame object.</p>",10],["Leap.Frame#translation","Leap.Frame","Leap.Frame.html#translation","(Leap.Frame sinceFrame)","<p>The change of position derived from the overall linear motion between the  current frame and the specified frame.</p> <p>The returned translation vector provides the magnitude and direction of the  movement in millimeters.</p> <p>The Leap derives frame translation from the linear motion of all objects  detected in the field of view.</p> <p>If either this frame or sinceFrame is an invalid Frame object, then this  method returns a zero vector.</p>",11],["Leap.Hand#finger","Leap.Hand","Leap.Hand.html#finger","(String id)","<p>The finger with the specified ID attached to this hand.</p> <p>Use this function to retrieve a Pointable object representing a finger attached to this hand using an ID value obtained from a previous frame. This function always returns a Pointable object, but if no finger with the specified ID is present, an invalid Pointable object is returned.</p> <p>Note that the ID values assigned to fingers persist across frames, but only until tracking of a particular finger is lost. If tracking of a finger is lost and subsequently regained, the new Finger object representing that finger may have a different ID than that representing the finger in an earlier frame.</p>",12],["Leap.Hand#rotationAngle","Leap.Hand","Leap.Hand.html#rotationAngle","(Leap.Frame sinceFrame)","<p>The angle of rotation around the rotation axis derived from the change in  orientation of this hand, and any associated fingers and tools, between the  current frame and the specified frame.</p> <p>The returned angle is expressed in radians measured clockwise around the  rotation axis (using the right-hand rule) between the start and end frames.  The value is always between 0 and pi radians (0 and 180 degrees).</p> <p>If a corresponding Hand object is not found in sinceFrame, or if either  this frame or sinceFrame are invalid Frame objects, then the angle of rotation is zero.</p>",13],["Leap.Hand#rotationAxis","Leap.Hand","Leap.Hand.html#rotationAxis","(Leap.Frame sinceFrame)","<p>The axis of rotation derived from the change in orientation of this hand, and  any associated fingers and tools, between the current frame and the specified frame.</p> <p>The returned direction vector is normalized.</p> <p>If a corresponding Hand object is not found in sinceFrame, or if either  this frame or sinceFrame are invalid Frame objects, then this method returns a zero vector.</p>",14],["Leap.Hand#rotationMatrix","Leap.Hand","Leap.Hand.html#rotationMatrix","(Leap.Frame sinceFrame)","<p>The transform matrix expressing the rotation derived from the change in  orientation of this hand, and any associated fingers and tools, between  the current frame and the specified frame.</p> <p>If a corresponding Hand object is not found in sinceFrame, or if either  this frame or sinceFrame are invalid Frame objects, then this method returns  an identity matrix.</p>",15],["Leap.Hand#scaleFactor","Leap.Hand","Leap.Hand.html#scaleFactor","(Leap.Frame sinceFrame)","<p>The scale factor derived from the hand's motion between the current frame and the specified frame.</p> <p>The scale factor is always positive. A value of 1.0 indicates no scaling took place.  Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.</p> <p>The Leap derives scaling from the relative inward or outward motion of a hand  and its associated fingers and tools (independent of translation and rotation).</p> <p>If a corresponding Hand object is not found in sinceFrame, or if either this frame or sinceFrame  are invalid Frame objects, then this method returns 1.0.</p>",16],["Leap.Hand#toString","Leap.Hand","Leap.Hand.html#toString","function","<p>A string containing a brief, human readable description of the Hand object.</p>",17],["Leap.Hand#translation","Leap.Hand","Leap.Hand.html#translation","(Leap.Frame sinceFrame)","<p>The change of position of this hand between the current frame and the specified frame</p> <p>The returned translation vector provides the magnitude and direction of the  movement in millimeters.</p> <p>If a corresponding Hand object is not found in sinceFrame, or if either this frame or  sinceFrame are invalid Frame objects, then this method returns a zero vector.</p>",18],["Leap.loop","Leap","Leap.html#loop","(function callback)","<p>The Leap.loop() function passes a frame of Leap data to your callback function and then calls window.requestAnimationFrame() after executing your callback function.</p> <p>Leap.loop() sets up the Leap controller and WebSocket connection for you. You do not need to create your own controller when using this method.</p> <p>Your callback function is called on an interval determined by the client browser. Typically, this is on an interval of 60 frames/second. The most recent frame of Leap data is passed to your callback function. If the Leap is producing frames at a slower rate than the browser frame rate, the same frame of Leap data can be passed to your function in successive animation updates.</p> <p>As an alternative, you can create your own Controller object and use a Controller#onFrame onFrame} callback to process the data at the frame rate of the Leap device. See {@link Controller for an example.</p>",19],["Leap.Pointable#toString","Leap.Pointable","Leap.Pointable.html#toString","function","<p>A string containing a brief, human readable description of the Pointable object.</p>",20],["Leap.Vector#AngleTo","Leap.Vector","Leap.Vector.html#AngleTo","(Leap.Vector other)","<p>The angle between this vector and the specified vector in radians.</p> <p>The angle is measured in the plane formed by the two vectors.  The angle returned is always the smaller of the two conjugate angles.  Thus A.angleTo(B) == B.angleTo(A) and is always a positive value less  than or equal to pi radians (180 degrees).</p> <p>If either vector has zero length, then this function returns zero.</p> <p><img src=\"images/Math_AngleTo.png\" alt=\"Vector AngleTo\"></p>",21],["Leap.Vector#compare","Leap.Vector","Leap.Vector.html#compare","(Leap.Vector other)","<p>Compare Vector equality component-wise.</p>",22],["Leap.Vector#Cross","Leap.Vector","Leap.Vector.html#Cross","(Leap.Vector other)","<p>The cross product of this vector and the specified vector.</p> <p>The cross product is a vector orthogonal to both original vectors.  It has a magnitude equal to the area of a parallelogram having the  two vectors as sides. The direction of the returned vector is  determined by the right-hand rule. Thus A.cross(B) == -B.cross(A).</p> <p><img src=\"images/Math_Cross.png\" alt=\"Vector Cross\"></p>",23],["Leap.Vector#distanceTo","Leap.Vector","Leap.Vector.html#distanceTo","(Leap.Vector other)","<p>The distance between the point represented by this Vector object  and a point represented by the specified Vector object.</p>",24],["Leap.Vector#dividedBy","Leap.Vector","Leap.Vector.html#dividedBy","(Float scalar)","<p>Divide vector by a scalar.</p>",25],["Leap.Vector#dot","Leap.Vector","Leap.Vector.html#dot","(Leap.Vector other)","<p>The dot product of this vector with another vector.</p> <p>The dot product is the magnitude of the projection of this vector onto  the specified vector.</p> <p><img src=\"images/Math_Dot.png\" alt=\"Vector Dot\"></p>",26],["Leap.Vector#isValid","Leap.Vector","Leap.Vector.html#isValid","function","<p>Returns true if all of the vector's components are finite.</p> <p>If any component is NaN or infinite, then this returns false.</p>",27],["Leap.Vector#magnitude","Leap.Vector","Leap.Vector.html#magnitude","function","<p>The magnitude, or length, of this vector.</p> <p>The magnitude is the L2 norm, or Euclidean distance between the  origin and the point represented by the (x, y, z) components of  this Vector object.</p>",28],["Leap.Vector#magnitudeSquared","Leap.Vector","Leap.Vector.html#magnitudeSquared","function","<p>The square of the magnitude, or length, of this vector.</p>",29],["Leap.Vector#minus","Leap.Vector","Leap.Vector.html#minus","(Leap.Vector other)","<p>Subtract vectors component-wise.</p>",30],["Leap.Vector#multiply","Leap.Vector","Leap.Vector.html#multiply","(Float scalar)","<p>Multiply vector by a scalar.</p>",31],["Leap.Vector#normalized","Leap.Vector","Leap.Vector.html#normalized","function","<p>A normalized copy of this vector.</p> <p>A normalized vector has the same direction as the original  vector, but with a length of one.</p>",32],["Leap.Vector#pitch","Leap.Vector","Leap.Vector.html#pitch","function","<p>The pitch angle in radians.</p> <p>Pitch is the angle between the negative z-axis and the projection  of the vector onto the y-z plane. In other words, pitch represents  rotation around the x-axis. If the vector points upward, the  returned angle is between 0 and pi radians (180 degrees); if it  points downward, the angle is between 0 and -pi radians.</p> <p><img src=\"images/Math_Pitch_Angle.png\" alt=\"Vector Pitch\"></p>",33],["Leap.Vector#plus","Leap.Vector","Leap.Vector.html#plus","(Leap.Vector other)","<p>Add vectors component-wise.</p>",34],["Leap.Vector#roll","Leap.Vector","Leap.Vector.html#roll","function","<p>The roll angle in radians.</p> <p>Roll is the angle between the y-axis and the projection of  the vector onto the x-y plane. In other words, roll represents  rotation around the z-axis. If the vector points to the left  of the y-axis, then the returned angle is between 0 and pi  radians (180 degrees); if it points to the right, the angle is  between 0 and -pi radians.</p> <p><img src=\"images/Math_Roll_Angle.png\" alt=\"Vector Roll\"></p> <p>Use this function to get roll angle of the plane to which this  vector is a normal. For example, if this vector represents the  normal to the palm, then this function returns the tilt or roll  of the palm plane compared to the horizontal (x-z) plane.</p>",35],["Leap.Vector#toArray","Leap.Vector","Leap.Vector.html#toArray","function","<p>Returns the vector as a float array.</p>",36],["Leap.Vector#toString","Leap.Vector","Leap.Vector.html#toString","function","<p>Returns a string containing this vector in a human readable  format: (x, y, z).</p>",37],["Leap.Vector#yaw","Leap.Vector","Leap.Vector.html#yaw","function","<p>The yaw angle in radians. </p> <p>Yaw is the angle between the negative z-axis and the projection  of the vector onto the x-z plane. In other words, yaw represents  rotation around the y-axis. If the vector points to the right  of the negative z-axis, then the returned angle is between 0 and  pi radians (180 degrees); if it points to the left, the angle  is between 0 and -pi radians.</p> <p><img src=\"images/Math_Yaw_Angle.png\" alt=\"Vector Roll\"></p>",38],["Leap.CircleGesture < Leap.Gesture","Leap","Leap.CircleGesture.html","class","<p>Constructs a new CircleGesture object.</p> <p>An uninitialized CircleGesture object is considered invalid. Get valid instances of the CircleGesture class from a Frame object.</p>",39],["Leap.Controller","Leap","Leap.Controller.html","class","<p>Constructs a Controller object.</p> <p>When creating a Controller object, you may optionally pass in options  to set the host , set the port, enable gestures, or select the frame event type.</p> <pre><code class=\"prettyprint source javascript\">var controller = new Leap.Controller({   host: '127.0.0.1',   port: 6437,   enableGestures: true,   frameEventName: 'animationFrame' });</code></pre>",40],["Leap.Frame","Leap","Leap.Frame.html","class","<p>Constructs a Frame object.</p> <p>Frame instances created with this constructor are invalid. Get valid Frame objects by calling the Leap.Controller#frame() function.</p>",41],["Leap.Gesture","Leap","Leap.Gesture.html","class","<p>Constructs a new Gesture object.</p> <p>An uninitialized Gesture object is considered invalid. Get valid instances of the Gesture class, which will be one of the Gesture subclasses, from a Frame object.</p>",42],["Leap.Hand","Leap","Leap.Hand.html","class","<p>Constructs a Hand object.</p> <p>An uninitialized hand is considered invalid. Get valid Hand objects from a Frame object.</p>",43],["Leap.KeyTapGesture < Leap.Gesture","Leap","Leap.KeyTapGesture.html","class","<p>Constructs a new KeyTapGesture object.</p> <p>An uninitialized KeyTapGesture object is considered invalid. Get valid instances of the KeyTapGesture class from a Frame object.</p>",44],["Leap.Pointable","Leap","Leap.Pointable.html","class","<p>Constructs a Pointable object.</p> <p>An uninitialized pointable is considered invalid. Get valid Pointable objects from a Frame or a Hand object.</p>",45],["Leap.ScreenTapGesture < Leap.Gesture","Leap","Leap.ScreenTapGesture.html","class","<p>Constructs a new ScreenTapGesture object.</p> <p>An uninitialized ScreenTapGesture object is considered invalid. Get valid instances of the ScreenTapGesture class from a Frame object.</p>",46],["Leap.SwipeGesture < Leap.Gesture","Leap","Leap.SwipeGesture.html","class","<p>Constructs a new SwipeGesture object.</p> <p>An uninitialized SwipeGesture object is considered invalid. Get valid instances of the SwipeGesture class from a Frame object.</p>",47],["Leap.Vector","Leap","Leap.Vector.html","class","<p>Constructs a Vector object.</p> <p>Creates a new Vector from the specified Array or Vector.  The default constructor sets all components to zero.</p>",48],["Leap","","Leap.html","","<p>Leap is the global namespace of the Leap API.</p>",49]],"searchIndex":["leap.controller#frame","leap.frame#dump","leap.frame#finger","leap.frame#hand","leap.frame#pointable","leap.frame#rotationangle","leap.frame#rotationaxis","leap.frame#rotationmatrix","leap.frame#scalefactor","leap.frame#tool","leap.frame#tostring","leap.frame#translation","leap.hand#finger","leap.hand#rotationangle","leap.hand#rotationaxis","leap.hand#rotationmatrix","leap.hand#scalefactor","leap.hand#tostring","leap.hand#translation","leap.loop","leap.pointable#tostring","leap.vector#angleto","leap.vector#compare","leap.vector#cross","leap.vector#distanceto","leap.vector#dividedby","leap.vector#dot","leap.vector#isvalid","leap.vector#magnitude","leap.vector#magnitudesquared","leap.vector#minus","leap.vector#multiply","leap.vector#normalized","leap.vector#pitch","leap.vector#plus","leap.vector#roll","leap.vector#toarray","leap.vector#tostring","leap.vector#yaw","leap.circlegesture","leap.controller","leap.frame","leap.gesture","leap.hand","leap.keytapgesture","leap.pointable","leap.screentapgesture","leap.swipegesture","leap.vector","leap"],"longSearchIndex":["leap.controller#frame","leap.frame#dump","leap.frame#finger","leap.frame#hand","leap.frame#pointable","leap.frame#rotationangle","leap.frame#rotationaxis","leap.frame#rotationmatrix","leap.frame#scalefactor","leap.frame#tool","leap.frame#tostring","leap.frame#translation","leap.hand#finger","leap.hand#rotationangle","leap.hand#rotationaxis","leap.hand#rotationmatrix","leap.hand#scalefactor","leap.hand#tostring","leap.hand#translation","leap.loop","leap.pointable#tostring","leap.vector#angleto","leap.vector#compare","leap.vector#cross","leap.vector#distanceto","leap.vector#dividedby","leap.vector#dot","leap.vector#isvalid","leap.vector#magnitude","leap.vector#magnitudesquared","leap.vector#minus","leap.vector#multiply","leap.vector#normalized","leap.vector#pitch","leap.vector#plus","leap.vector#roll","leap.vector#toarray","leap.vector#tostring","leap.vector#yaw","leap.circlegesture","leap.controller","leap.frame","leap.gesture","leap.hand","leap.keytapgesture","leap.pointable","leap.screentapgesture","leap.swipegesture","leap.vector","leap"]};}catch(e){if(console && console.log){ console.log(e);}}